from pico2d import *
import random

# Game object class here
class Grass:
    def __init__(self):
        self.image = load_image('grass.png')

    def update(self):
        pass

    def draw(self):
        self.image.draw(400, 30)

class Boy:
    def __init__(self):
        self.x, self.y = random.randint(0, 100), 90
        self.frame = random.randint(0, 7)
        self.image = load_image('run_animation.png')

    def update(self):
        self.frame = (self.frame + 1) % 8
        self.x += 5

    def draw(self):
        self.image.clip_draw(self.frame * 100, 0, 100, 100, self.x, self.y)

class Ball:
    def __init__(self):
        self.size = random.choice([21, 41]) 
        if self.size == 21:
            self.image = load_image('ball21x21.png')
        else:
            self.image = load_image('ball41x41.png')
        self.x = random.randint(0, 800) 
        self.y = 600  
        self.speed = random.uniform(2, 10)  
        self.on_ground = False  

    def update(self):
        if not self.on_ground:  
            self.y -= self.speed  
            if self.y <= 30:  
                self.y = 30  
                self.on_ground = True  

    def draw(self):
        self.image.draw(self.x, self.y)

def handle_events():
    global running
    events = get_events()
    for event in events:
        if event.type == SDL_QUIT:
            running = False
        elif event.type == SDL_KEYDOWN and event.key == SDLK_ESCAPE:
            running = False

def update_world():
    grass.update()
    for boy in team:
        boy.update()
    for ball in balls:
        ball.update()

    
    if len(balls) < 10:  
        for ball in balls:
            if ball.on_ground:  
                balls.append(Ball())
                break  

def render_world():
    clear_canvas()
    grass.draw()
    for boy in team:
        boy.draw()
    for ball in balls:
        ball.draw()
    update_canvas()

def reset_world():
    global running, grass, team, balls

    running = True
    grass = Grass()
    team = [Boy() for i in range(11)]  
    balls = [Ball() for _ in range(5)]  

open_canvas()


running = True
reset_world()


while running:
    handle_events()
    update_world()
    render_world()
    delay(0.05)

close_canvas()
